import networkx as nx
import matplotlib.pyplot as plt

# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ–∞
G = nx.DiGraph()

edges = [
    ("T1", "S1", 25),
    ("T1", "S2", 20),
    ("T1", "S3", 15),
    ("T2", "S3", 15),
    ("T2", "S4", 30),
    ("T2", "S2", 10),
    ("S1", "M1", 15), ("S1", "M2", 10), ("S1", "M3", 20),
    ("S2", "M4", 15), ("S2", "M5", 10), ("S2", "M6", 25),
    ("S3", "M7", 20), ("S3", "M8", 15), ("S3", "M9", 10),
    ("S4", "M10", 20), ("S4", "M11", 10), ("S4", "M12", 15),
    ("S4", "M13", 5), ("S4", "M14", 10),
]

for u, v, cap in edges:
    G.add_edge(u, v, capacity=cap)

# –î–æ–¥–∞—î–º–æ —Å—É–ø–µ—Ä–∂–µ—Ä–µ–ª–æ —Ç–∞ —Å—É–ø–µ—Ä—Å—Ç—ñ–∫ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É
G.add_node("SRC")
G.add_edge("SRC", "T1", capacity=float("inf"))
G.add_edge("SRC", "T2", capacity=float("inf"))

G.add_node("SINK")
for i in range(1, 15):
    G.add_edge(f"M{i}", "SINK", capacity=float("inf"))

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É
flow_value, flow_dict = nx.maximum_flow(G, "SRC", "SINK")
print(f"\nüî¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫: {flow_value} –æ–¥–∏–Ω–∏—Ü—å\n")

# –í–∏–≤—ñ–¥ —Ç–∞–±–ª–∏—Ü—ñ: –¢–µ—Ä–º—ñ–Ω–∞–ª ‚Üí –ú–∞–≥–∞–∑–∏–Ω
print("üìä –ü–æ—Ç–æ–∫–∏ –∑ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ–≤ –¥–æ –º–∞–≥–∞–∑–∏–Ω—ñ–≤:\n")
print(f"{'–¢–µ—Ä–º—ñ–Ω–∞–ª':<10} {'–ú–∞–≥–∞–∑–∏–Ω':<10} {'–§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫':<20}")
print("-" * 40)

for t in ["T1", "T2"]:
    for s in flow_dict[t]:
        if flow_dict[t][s] > 0:
            for m in flow_dict[s]:
                if flow_dict[s][m] > 0:
                    print(f"{t:<10} {m:<10} {flow_dict[s][m]:<20}")

# –í–∏—Å–Ω–æ–≤–∫–∏
print("\nüß† –õ–æ–≥—ñ—á–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏:")
print("-" * 60)
print("1. –ù–∞–π–±—ñ–ª—å—à–∏–π –ø–æ—Ç—ñ–∫ –∑–∞–±–µ–∑–ø–µ—á—É—î –¢–µ—Ä–º—ñ–Ω–∞–ª 2 (T2) –∑–∞–≤–¥—è–∫–∏ –≤–µ–ª–∏–∫—ñ–π –ø—Ä–æ–ø—É—Å–∫–Ω—ñ–π –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –°–∫–ª–∞–¥—É 4.")
print("2. –í—É–∑—å–∫—ñ –º—ñ—Å—Ü—è ‚Äî –°–∫–ª–∞–¥ 2 (S2) —Ç–∞ –°–∫–ª–∞–¥ 3 (S3), –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥ –¥–≤–æ—Ö —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ–≤.")
print("3. –ú–∞–≥–∞–∑–∏–Ω–∏, —è–∫—ñ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–∞–π–º–µ–Ω—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ ‚Äî M13 —Ç–∞ M14.")
print("4. –î–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–≤‚Äô—è–∑–∫—ñ–≤ T2‚ÜíS2, S3‚ÜíM9 —Ç–∞ S4‚ÜíM13.")
print("-" * 60)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ–∞
plt.figure(figsize=(12, 8))
pos = nx.spring_layout(G, seed=42)
edge_labels = {(u, v): f'{d["capacity"]}' for u, v, d in G.edges(data=True)}
nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=10)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
plt.title("–ì—Ä–∞—Ñ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó –º–µ—Ä–µ–∂—ñ")
plt.savefig("graph_output.png")
plt.show()
